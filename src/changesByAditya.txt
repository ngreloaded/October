/*
* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/

/* 
 * Base code for CS 251 Software Systems Lab 
 * Department of Computer Science and Engineering, IIT Bombay
 * Instructor: Parag Chaudhuri
 */
#include <stdio.h>
#define DEGTORAD 0.0174532925199432957f
#include "cs251_base.hpp"
#include "render.hpp"

#ifdef __APPLE__
	#include <GLUT/glut.h>
#else
	#include "GL/freeglut.h"
#endif

#include <cstring>
using namespace std;

#include "dominos.hpp"

namespace cs251
{
  /**  The is the constructor 
   * This is the documentation block for the constructor.
   */ 
	
	b2Vec2 m_offset;
	b2Body* m_chassis;
	b2Body* m_wheel;
	b2RevoluteJoint* m_motorJoint;
	bool m_motorOn;
	float32 m_motorSpeed;
	int val=0;
	float32 c = 2.5;
	
	void dominos_t::CreateLeg(float32 s, const b2Vec2& wheelAnchor)
	{
		b2Vec2 p1(c * 5.4f * s, -6.1f * c);
		b2Vec2 p2(c * 7.2f * s, -1.2f * c);
		b2Vec2 p3(c * 4.3f * s, -1.9f * c);
		b2Vec2 p4(c * 3.1f * s, 0.8f * c);
		b2Vec2 p5(c * 6.0f * s, 1.5f * c);
		b2Vec2 p6(c * 2.5f * s, 3.7f * c);

		b2FixtureDef fd1, fd2;
		fd1.filter.groupIndex = -1;
		fd2.filter.groupIndex = -1;
		fd1.density = 1.0f;
		fd2.density = 1.0f;

		b2PolygonShape poly1, poly2;

		if (s > 0.0f)
		{
			b2Vec2 vertices[3];

			vertices[0] = p1;
			vertices[1] = p2;
			vertices[2] = p3;
			poly1.Set(vertices, 3);

			vertices[0] = b2Vec2_zero;
			vertices[1] = p5 - p4;
			vertices[2] = p6 - p4;
			poly2.Set(vertices, 3);
		}
		else
		{
			b2Vec2 vertices[3];

			vertices[0] = p1;
			vertices[1] = p3;
			vertices[2] = p2;
			poly1.Set(vertices, 3);

			vertices[0] = b2Vec2_zero;
			vertices[1] = p6 - p4;
			vertices[2] = p5 - p4;
			poly2.Set(vertices, 3);
		}

		fd1.shape = &poly1;
		fd2.shape = &poly2;

		b2BodyDef bd1, bd2;
		bd1.type = b2_dynamicBody;
		bd2.type = b2_dynamicBody;
		bd1.position = m_offset;
		bd2.position = p4 + m_offset;

		bd1.angularDamping = 10.0f;
		bd2.angularDamping = 10.0f;

		b2Body* body1 = m_world->CreateBody(&bd1);
		b2Body* body2 = m_world->CreateBody(&bd2);

		body1->CreateFixture(&fd1);
		body2->CreateFixture(&fd2);

		b2DistanceJointDef djd;

		// Using a soft distance constraint can reduce some jitter.
		// It also makes the structure seem a bit more fluid by
		// acting like a suspension system.
		djd.dampingRatio = 0.7f;
		djd.frequencyHz = 8.0f;

		djd.Initialize(body1, body2, p2 + m_offset, p5 + m_offset);
		m_world->CreateJoint(&djd);

		djd.Initialize(body1, body2, p3 + m_offset, p4 + m_offset);
		m_world->CreateJoint(&djd);

		djd.Initialize(body1, m_wheel, p3 + m_offset, wheelAnchor + m_offset);
		m_world->CreateJoint(&djd);

		djd.Initialize(body2, m_wheel, p6 + m_offset, wheelAnchor + m_offset);
		m_world->CreateJoint(&djd);

		b2RevoluteJointDef rjd;

		rjd.Initialize(body2, m_chassis, p4 + m_offset);
		m_world->CreateJoint(&rjd);
		
		float32 damping_const = 5.0f;
		
		if(s == -1)
		{
			// making the first leg part 1
			b2Body* leg1;	
			b2Body* leg2;
			
			{
				b2BodyDef bodyDef;
				bodyDef.type = b2_dynamicBody;
				bodyDef.position.Set(m_offset.x + -14.0f, m_offset.y + -13.0f);
				bodyDef.angle = -0.38 * b2_pi;
				bodyDef.angularDamping = damping_const;
				
				b2PolygonShape shape;
				shape.SetAsBox(5.0f, 0.5f);
				
				b2FixtureDef fixture;
				fixture.density = 0.1f;
				fixture.friction = 1.0f;
				fixture.shape = &shape;
				fixture.filter.groupIndex = -1;
				
				leg1 = m_world->CreateBody(&bodyDef);
				leg1->CreateFixture(&fixture);
			}
			
			{
				b2BodyDef bodyDef;
				bodyDef.type = b2_dynamicBody;
				bodyDef.position.Set(m_offset.x + -13.0f, m_offset.y + -18.0f);
				bodyDef.angle = 0.40 * b2_pi;
				bodyDef.angularDamping = damping_const;
				
				b2PolygonShape shape;
				shape.SetAsBox(7.0f, 0.5f);
				
				b2FixtureDef fixture;
				fixture.density = 0.1f;
				fixture.friction = 1.0f;
				fixture.shape = &shape;
				fixture.filter.groupIndex = -1;
				
				leg2 = m_world->CreateBody(&bodyDef);
				leg2->CreateFixture(&fixture);
			}	
			
			{
				// joining the toes to the last bony part 
				b2WeldJointDef joint;
				b2Vec2 vec;
				vec.Set(m_offset.x + -14.1f, m_offset.y + -13.0f);
				joint.Initialize(leg1 ,body1 , vec);
				m_world->CreateJoint(&joint);
			}
			
			{	
				// now joining joint1
				b2WeldJointDef joint;
				b2Vec2 vec(m_offset.x + -12.0f, m_offset.y + -17.5f);
				joint.Initialize(leg2, leg1, vec);
				m_world->CreateJoint(&joint);
			}
/*			
			{
				// the toes part as a circle
				b2BodyDef toeDef;
				toeDef.position.Set(m_offset.x + -15.0f, m_offset.y - 24.8f);
				toeDef.type = b2_dynamicBody;
				toeDef.angularDamping = 5.0f;
				
				b2CircleShape circleShape;
				circleShape.m_p.Set(0, 0); //position, relative to body position
				circleShape.m_radius = 1.0f; //radius
				
				b2FixtureDef toeFix;
				toeFix.shape = &circleShape; //this is a pointer to the shape above
				toeFix.density = 0.1f;
				toeFix.friction = 1.0f;
				toeFix.filter.groupIndex = -1; 
				
				b2Body* toe;
				toe = m_world->CreateBody(&toeDef);
				toe->CreateFixture(&toeFix);
				
				// joining the toes to the last bony part 
				b2WeldJointDef toeJoint;
		
				b2Vec2 anchorToe;
				anchorToe.Set(m_offset.x + -15.0f, m_offset.y - 24.8f);
				toeJoint.Initialize(toe ,leg2 , anchorToe);
				m_world->CreateJoint(&toeJoint);
			}

			{
				// creating the distace joints
				b2DistanceJointDef joint;
				const b2Vec2 point1(2.0f +  m_offset.x + -14.0f, 6.6f + m_offset.y + -13.0f);
				const b2Vec2 point2(3.0f + m_offset.x + -12.0f, 3.0f + m_offset.y + -17.5f);
				joint.Initialize(body1 , leg2, point1, point2);
				joint.collideConnected = true;
				joint.frequencyHz = 10.0f;
				joint.dampingRatio = 0.5f;
				m_world->CreateJoint(&joint);
			}
			
			{
				// creating the distace joints
				b2DistanceJointDef joint;
				const b2Vec2 point1(-2.0f + m_offset.x + -14.0f, 4.0f + m_offset.y + -13.0f);
				const b2Vec2 point2(3.0f + m_offset.x + -12.0f, 3.0f + m_offset.y + -17.5f);
				joint.Initialize(body1 , leg2, point1, point2);
				joint.collideConnected = true;
				joint.frequencyHz = 10.0f;
				joint.dampingRatio = 0.5f;
				m_world->CreateJoint(&joint);
			}
*/			
		}
		else 		// back legs
		{
			// making the first leg part 1
			b2Body* leg1;	
			b2Body* leg2;
			
			{
				b2BodyDef bodyDef;
				bodyDef.type = b2_dynamicBody;
				bodyDef.position.Set(m_offset.x + 13.7f, m_offset.y + -14.0f);
				bodyDef.angle = -0.42 * b2_pi;
				bodyDef.angularDamping = damping_const;
				
				b2PolygonShape shape;
				shape.SetAsBox(5.0f, 0.5f);
				
				b2FixtureDef fixture;
				fixture.density = 0.1f;
				fixture.friction = 1.0f;
				fixture.shape = &shape;
				fixture.filter.groupIndex = -1;
				
				leg1 = m_world->CreateBody(&bodyDef);
				leg1->CreateFixture(&fixture);
			}	
			
			{
				b2BodyDef bodyDef;
				bodyDef.type = b2_dynamicBody;
				bodyDef.position.Set(m_offset.x + 15.0f, m_offset.y + -19.5f);
				bodyDef.angle = 0.46 * b2_pi;
				bodyDef.angularDamping = damping_const;
				
				b2PolygonShape shape;
				shape.SetAsBox(5.0f, 0.5f);
				
				b2FixtureDef fixture;
				fixture.density = 0.1f;
				fixture.friction = 1.0f;
				fixture.shape = &shape;
				fixture.filter.groupIndex = -1;
				
				leg2 = m_world->CreateBody(&bodyDef);
				leg2->CreateFixture(&fixture);
			}
			
			{
				// joining the toes to the last bony part 
				b2WeldJointDef joint;
				b2Vec2 vec;
				vec.Set(m_offset.x + 13.7f, m_offset.y + -15.0f);
				joint.Initialize(leg1 ,body1 , vec);
				m_world->CreateJoint(&joint);
			}
			
			{	
				// now joining joint1
				b2WeldJointDef joint;
				b2Vec2 vec(m_offset.x + 15.0f, m_offset.y + -20.5f);
				joint.Initialize(leg2, leg1, vec);
				m_world->CreateJoint(&joint);
			}
			
			/*
			{
				// creating the distace joints
				b2DistanceJointDef joint;
				const b2Vec2 point1(-1.5f + m_offset.x + 13.7f, 4.5f + m_offset.y + -15.0f);
				const b2Vec2 point2(2.5f + m_offset.x + 15.0f, 3.5f + m_offset.y + -20.5f);
				joint.Initialize(body1 , leg2, point1, point2);
				joint.collideConnected = true;
				joint.frequencyHz = 10.0f;
				joint.dampingRatio = 0.5f;
				m_world->CreateJoint(&joint);
			}
			
			{
				// creating the distace joints
				b2DistanceJointDef joint;
				const b2Vec2 point1(2.0f + m_offset.x + 13.7f, 6.5f + m_offset.y + -15.0f);
				const b2Vec2 point2(2.5f + m_offset.x + 15.0f, 3.5f + m_offset.y + -20.5f);
				joint.Initialize(body1 , leg2, point1, point2);
				joint.collideConnected = true;
				joint.frequencyHz = 10.0f;
				joint.dampingRatio = 0.5f;
				m_world->CreateJoint(&joint);
			}
				*/
		}
	}
	
	

  dominos_t::dominos_t()
  {
	  
	  //GROUND
	  {
		  b2Body* ground;
		  b2EdgeShape shape;
		  shape.Set(b2Vec2(-900.0f, 5.0f), b2Vec2(900.0f, 5.0f));
		  b2BodyDef bd; 
		  ground = m_world->CreateBody(&bd); 
		  ground->CreateFixture(&shape, 0.0f);
	  }
	  

		m_offset.Set(0.0f, 31.0f);
		m_motorSpeed = -5.0;
		m_motorOn = true;
		b2Vec2 pivot(0.0f, 0.8f);

		/*// Balls
		for (int32 i = 0; i < 40; ++i)
		{
			b2CircleShape shape;
			shape.m_radius = 0.25f;

			b2BodyDef bd;
			bd.type = b2_dynamicBody;
			bd.position.Set(-40.0f + 2.0f * i, m_offset.y - 2.5f);

			b2Body* body = m_world->CreateBody(&bd);
			body->CreateFixture(&shape, 1.0f);
		}*/

		// Chassis
		{
			b2PolygonShape shape;
			shape.SetAsBox(20.0f, 2.0f);

			b2FixtureDef sd;
			sd.density =  5.0f;
			sd.shape = &shape;
			sd.filter.groupIndex = -1;
			b2BodyDef bd;
			bd.type = b2_dynamicBody;
			bd.position = pivot + m_offset;
			m_chassis = m_world->CreateBody(&bd);
			m_chassis->CreateFixture(&sd);
		}
		/*
		// head 
		{
			b2BodyDef bodyDef;
			bodyDef.type = b2_dynamicBody;
			bodyDef.position.Set(m_offset.x - 18.0f, m_offset.y + 4.5f);
			
			b2PolygonShape shape;
			shape.SetAsBox(2.0f, 1.0f);
			
			b2FixtureDef fixture;
			fixture.density = 50.0f;
			fixture.friction = 1.0f;
			fixture.shape = &shape;
			
			b2Body* body = m_world->CreateBody(&bodyDef);
			body->CreateFixture(&fixture);
		}*/

		{
			b2CircleShape shape;
			shape.m_radius = c * 1.6f;

			b2FixtureDef sd;
			sd.density = 1.0f;
			sd.shape = &shape;
			sd.filter.groupIndex = -1;
			b2BodyDef bd;
			bd.type = b2_dynamicBody;
			bd.position = pivot + m_offset;
			m_wheel = m_world->CreateBody(&bd);
			m_wheel->CreateFixture(&sd);
		}

		{
			b2RevoluteJointDef jd;
			jd.Initialize(m_wheel, m_chassis, pivot + m_offset);
			jd.collideConnected = false;
			jd.motorSpeed = m_motorSpeed;
			jd.maxMotorTorque = 5000.0f;
			jd.enableMotor = m_motorOn;
			m_motorJoint = (b2RevoluteJoint*)m_world->CreateJoint(&jd);
		}

		b2Vec2 wheelAnchor;
		
		wheelAnchor = pivot + b2Vec2(0.0f, -1.2f);
		val=1;
		CreateLeg(-1.0f, wheelAnchor);
		CreateLeg( 1.0f, wheelAnchor);
		val=2;
		m_wheel->SetTransform(m_wheel->GetPosition(), 120.0f * b2_pi / 180.0f);
		CreateLeg( -1.0f, wheelAnchor);
		CreateLeg( 1.0f, wheelAnchor);
/*
		m_wheel->SetTransform(m_wheel->GetPosition(), -120.0f * b2_pi / 180.0f);
		CreateLeg( -1.0f, wheelAnchor);
		CreateLeg( 1.0f, wheelAnchor);
*/	
		
		

		/*// creating a horizaontal platform to serve as temp cheetah body
		
		{
			b2BodyDef cheetahBodyDef;
			cheetahBodyDef.position.Set(0.0f, 30.0f);
			cheetahBodyDef.type=b2_dynamicBody;
			
			b2PolygonShape cheetahBodyShape;
			cheetahBodyShape.SetAsBox(24.0f, 1.0f);
			
			b2FixtureDef cheetahBodyFixture;
			cheetahBodyFixture.shape=&cheetahBodyShape;
			cheetahBodyFixture.filter.groupIndex = -1;
			
			cheetahBody=m_world->CreateBody(&cheetahBodyDef);
			cheetahBody->CreateFixture(&cheetahBodyFixture);
		}
		
		// creating  the body BACK LEGS
		
		for(int i=0; i<2; i++)
		{
			float x_ref=0, y_ref=0;
			{
				
				// first part of leg
				b2BodyDef legDef1;
				legDef1.position.Set(x_ref+8.0f, y_ref+28.5f);
				legDef1.type=b2_dynamicBody;
				legDef1.angle = -0.1f * b2_pi; 
				
				b2PolygonShape legShape1;
				legShape1.SetAsBox(0.5, 7.0f);
				
				b2FixtureDef legFixture1;
				legFixture1.shape=&legShape1;
				legFixture1.density=1.0f;
				legFixture1.filter.groupIndex=-1;
				
				backLeg[i]=m_world->CreateBody(&legDef1);
				backLeg[i]->CreateFixture(&legFixture1);
				
				// second bony part of leg
				b2BodyDef legDef2;
				legDef2.position.Set(x_ref+10.5f, y_ref+17.0f);
				legDef2.type=b2_dynamicBody;
				legDef2.angle = 0.2f * b2_pi; 
				
				b2PolygonShape legShape2;
				legShape2.SetAsBox(0.5, 8.0f);
				
				b2FixtureDef legFixture2;
				legFixture2.shape=&legShape2;
				legFixture2.density=1.0f;
				legFixture2.filter.groupIndex=-1;
				
				b2Body* backLeg2;
				backLeg2=m_world->CreateBody(&legDef2);
				backLeg2->CreateFixture(&legFixture2);
				
				// theird bony part of leg
				b2BodyDef legDef3;
				legDef3.position.Set(x_ref+13.0f, y_ref+9.5f);
				legDef3.type=b2_dynamicBody;
				legDef3.angle = -0.25f * b2_pi; 
				
				b2PolygonShape legShape3;
				legShape3.SetAsBox(0.5, 6.0f);
				
				b2FixtureDef legFixture3;
				legFixture3.shape=&legShape3;
				legFixture3.density=1.0f;
				legFixture3.friction=1.0f;
				legFixture3.filter.groupIndex=-1;
				
				b2Body* backLeg3;
				backLeg3=m_world->CreateBody(&legDef3);
				backLeg3->CreateFixture(&legFixture3);
				
					// the toes part as a circle
				b2BodyDef toeDef;
				toeDef.position.Set(x_ref + 9.1f, y_ref + 5.9f);
				toeDef.type = b2_dynamicBody;
				
				b2CircleShape circleShape;
				circleShape.m_p.Set(0, 0); //position, relative to body position
				circleShape.m_radius = 1.2f; //radius
				
				b2FixtureDef toeFix;
				toeFix.shape = &circleShape; //this is a pointer to the shape above
				toeFix.density = 10.0f;
				toeFix.friction = 2.0f;
				toeFix.filter.groupIndex = -1; 
				
				b2Body* toe;
				toe = m_world->CreateBody(&toeDef);
				toe->CreateFixture(&toeFix);
				
				// joining the toes to the last bony part 
				b2WeldJointDef toeJoint;
		
				b2Vec2 anchorToe;
				anchorToe.Set(x_ref + 9.1f, y_ref + 5.9f);
				toeJoint.Initialize(toe ,backLeg3 , anchorToe);
				m_world->CreateJoint(&toeJoint);
				
				// now joining joint1
				b2RevoluteJointDef joint1;
				const b2Vec2 point1(x_ref+10.0f, y_ref+35.0f);
				
				joint1.Initialize(cheetahBody, backLeg[i], point1);
				joint1.lowerAngle = -0.1f * b2_pi;
				joint1.upperAngle = 0.1f * b2_pi; 
				joint1.enableLimit = true;
				joint1.maxMotorTorque = 10.0f;
				joint1.motorSpeed = 0.0f;
				joint1.enableMotor = true;			
				m_world->CreateJoint(&joint1);
				
				
				// now joining joint2
				b2RevoluteJointDef joint2;
				const b2Vec2 point2(x_ref+6.5f, y_ref+23.0f);
				joint2.Initialize(backLeg[i], backLeg2, point2);
				joint2.lowerAngle = -0.01f * b2_pi;
				joint2.upperAngle = 0.1f * b2_pi; 
				joint2.enableLimit = true;
				m_world->CreateJoint(&joint2);
				
				// now joining joint3
				b2RevoluteJointDef joint3;
				const b2Vec2 point3(x_ref+14.5f, y_ref+11.0f);
				joint3.Initialize(backLeg2, backLeg3, point3);
				m_world->CreateJoint(&joint3);
				
				// making a distance joint
				b2DistanceJointDef joint4;
				const b2Vec2 point4(x_ref+6.5f, y_ref+23.0f);
				const b2Vec2 point5(x_ref+17.5f, y_ref+13.0f);
				joint4.Initialize(backLeg2, backLeg3, point4, point5);
				joint4.collideConnected = true;
				joint4.frequencyHz = 5.0f;
				joint4.dampingRatio =0.0f;
				m_world->CreateJoint(&joint4);
				
				// making another distance joint
				b2DistanceJointDef joint5;
				const b2Vec2 point6(x_ref+7.5f, y_ref+27.0f);
				const b2Vec2 point7(x_ref+17.5f, y_ref+13.0f);
				joint4.Initialize(backLeg[i], backLeg3, point6, point7);
				joint4.collideConnected = true;
				joint4.frequencyHz = 5.0f;
				joint4.dampingRatio =0.8f;
				m_world->CreateJoint(&joint4);
				
				
			}
			
		}	
			// creating front legs for the body
		
		{
			int legno=0;
			for(int i=0; i < 2; i++){
				// first part of leg
				b2BodyDef legDef1;
				legDef1.position.Set(-30.0f+legno,30.5f);
				legDef1.type=b2_dynamicBody;
				legDef1.angle = -0.1f * b2_pi; 
				
				b2PolygonShape legShape1;
				legShape1.SetAsBox(0.5, 5.0f);
				
				b2FixtureDef legFixture1;
				legFixture1.shape=&legShape1;
				legFixture1.density=1.0f;
				legFixture1.filter.groupIndex=-1;

				frontLeg[i]=m_world->CreateBody(&legDef1);
				frontLeg[i]->CreateFixture(&legFixture1);
				
				// second bony part of leg
				b2BodyDef legDef2;
				legDef2.position.Set(-27.0f+legno, 20.0f);
				legDef2.type=b2_dynamicBody;
				legDef2.angle = 0.2f * b2_pi; 
				
				b2PolygonShape legShape2;
				legShape2.SetAsBox(0.5, 8.0f);
				
				b2FixtureDef legFixture2;
				legFixture2.shape=&legShape2;
				legFixture2.density=1.0f;
				legFixture2.filter.groupIndex=-1;
				b2Body* backLeg2;
				backLeg2=m_world->CreateBody(&legDef2);
				backLeg2->CreateFixture(&legFixture2);
				
				// theird bony part of leg
				b2BodyDef legDef3;
				legDef3.position.Set(-24.5f+legno,11.5f);
				legDef3.type=b2_dynamicBody;
				legDef3.angle = -0.17f * b2_pi; 
				
				b2PolygonShape legShape3;
				legShape3.SetAsBox(0.5, 7.5f);
				
				b2FixtureDef legFixture3;
				legFixture3.shape=&legShape3;
				legFixture3.density=1.0f;
				legFixture3.friction=1.0f;
				legFixture3.filter.groupIndex=-1;
				b2Body* backLeg3;
				backLeg3=m_world->CreateBody(&legDef3);
				backLeg3->CreateFixture(&legFixture3);
				
				// the toes part as a circle
				b2BodyDef toeDef;
				toeDef.position.Set( -28.0f, 5.9f);
				toeDef.type = b2_dynamicBody;
				
				b2CircleShape circleShape;
				circleShape.m_p.Set(0, 0); //position, relative to body position
				circleShape.m_radius = 1.2f; //radius
				
				b2FixtureDef toeFix;
				toeFix.shape = &circleShape; //this is a pointer to the shape above
				toeFix.density = 10.0f;
				toeFix.friction = 2.0f;
				toeFix.filter.groupIndex = -1; 
				
				b2Body* toe;
				toe = m_world->CreateBody(&toeDef);
				toe->CreateFixture(&toeFix);
				
				// joining the toes to the last bony part 
				b2WeldJointDef toeJoint;
		
				b2Vec2 anchorToe;
				anchorToe.Set(-28.0f, 5.9f);
				toeJoint.Initialize(toe ,backLeg3 , anchorToe);
				m_world->CreateJoint(&toeJoint);
				
				// now joining joint1
				b2RevoluteJointDef joint1;
				const b2Vec2 point1(-28.5f+legno, 35.0f);
				joint1.Initialize(cheetahBody, frontLeg[i], point1);
				joint1.lowerAngle = -0.01f * b2_pi;
				joint1.upperAngle = 0.1f * b2_pi; 
				joint1.enableLimit = true;
				joint1.maxMotorTorque = 10.0f;
				joint1.motorSpeed = 0.0f;
				joint1.enableMotor = true;			
				m_world->CreateJoint(&joint1);
				
				// now joining joint2
				b2RevoluteJointDef joint2;
				const b2Vec2 point2(-31.5f+legno, 26.0f);
				joint2.Initialize(frontLeg[i], backLeg2, point2);
				joint2.lowerAngle = -0.01f * b2_pi;
				joint2.upperAngle = 0.1f * b2_pi; 
				joint2.enableLimit = true;
				m_world->CreateJoint(&joint2);
				
				// now joining joint3
				b2RevoluteJointDef joint3;
				const b2Vec2 point3(-23.0f+legno, 14.0f);
				joint3.Initialize(backLeg2, backLeg3, point3);
				m_world->CreateJoint(&joint3);
				
				// making a distance joint
				b2DistanceJointDef joint4;
				const b2Vec2 point4(-31.5f+legno, 26.0f);
				const b2Vec2 point5(-20.5f+legno, 17.5f);
				joint4.Initialize(backLeg2, backLeg3, point4, point5);
				joint4.collideConnected = true;
				joint4.frequencyHz = 5.0f;
				joint4.dampingRatio =0.8f;
				m_world->CreateJoint(&joint4);
				
				// making another distance joint
				b2DistanceJointDef joint5;
				const b2Vec2 point6(-30.5f+legno, 29.0f);
				const b2Vec2 point7(-20.5f+legno, 17.5f);
				joint4.Initialize(frontLeg[i], backLeg3, point6, point7);
				joint4.collideConnected = true;
				joint4.frequencyHz = 5.0f;
				joint4.dampingRatio =0.0f;
				m_world->CreateJoint(&joint4);
			}
			
			
		}*/
		
		
		b2RevoluteJointDef jd;
		  b2Vec2 anchor;
		  //HEAD
			b2Vec2 headref(m_offset.x + 5.4f, m_offset.y  + -32.0f);
		  b2Body* head;
		  {
			  b2PolygonShape poly;
			  b2Vec2 vertices[8];
			  vertices[0].Set(headref.x + 0, headref.y + 0);
			  vertices[1].Set(headref.x + 9, headref.y + 3);
			  vertices[2].Set(headref.x + 10, headref.y + -2);
			  vertices[3].Set(headref.x + 4, headref.y + -5.5);
			  vertices[4].Set(headref.x + -3, headref.y + -5);
			  vertices[5].Set(headref.x + -3.5, headref.y + -4);
			  vertices[6].Set(headref.x + -3, headref.y + -3);
			  vertices[7].Set(headref.x + 0, headref.y + -2);
			  poly.Set(vertices, 8);
			  b2BodyDef bd;
			  bd.position.Set(headref.x + -44.0f, headref.y + 34.0f);
			  bd.type = b2_dynamicBody;
			  head = m_world->CreateBody(&bd);
			  b2FixtureDef* fd= new b2FixtureDef;
			  fd->shape = new b2PolygonShape;
			  fd->shape = &poly;
			  fd->density = 0.00001f;
			  fd->filter.groupIndex = 1;
			  head->CreateFixture(fd);
		  
		  }
		 
		 
		  //MAIN B0DY
		  b2Vec2 bodyref(m_offset.x + 6.0f, m_offset.y  + -32.0f);
		  
		  
		  b2Body* mainbody;
		  {
				b2PolygonShape poly;
				b2Vec2 vertices[8];
				vertices[0].Set(bodyref.x + 0, bodyref.y + 0);
				vertices[1].Set(bodyref.x + 10, bodyref.y + 3);
				vertices[2].Set(bodyref.x + 28, bodyref.y + 0.5);
				vertices[3].Set(bodyref.x + 28, bodyref.y + -1.5);
				vertices[4].Set(bodyref.x + 14.5, bodyref.y + -10);
				vertices[5].Set(bodyref.x + 10, bodyref.y + -10.2);
				vertices[6].Set(bodyref.x + 4, bodyref.y + -8);
				vertices[7].Set(bodyref.x + 0.5, bodyref.y + -3);
				poly.Set(vertices, 8);
				b2BodyDef bd;
				bd.position.Set(bodyref.x + -33.0f, bodyref.y + 36.0f);
				bd.type = b2_dynamicBody;
				mainbody = m_world->CreateBody(&bd);
				b2FixtureDef* fd= new b2FixtureDef;
				fd->shape = new b2PolygonShape;
				fd->shape = &poly;
				fd->density = 0.0f;
				fd->filter.groupIndex = -1;
				mainbody->CreateFixture(fd);

				b2WeldJointDef jd1;

				anchor.Set(bodyref.x + -33.0f, bodyref.y + 36.0f);
				jd1.Initialize(m_chassis, mainbody, anchor);
				m_world->CreateJoint(&jd1);
		  
		  }
		  
		  
		  //NECK
		b2Vec2 neckref(m_offset.x + 11.3f, m_offset.y  + -33.5f);
		b2Body* neck[3];
		{
			jd.enableLimit = true;
			jd.lowerAngle = -0.f * b2_pi;
			jd.upperAngle = 0.0f * b2_pi; 
			for (int i = 0; i < 3; i++)
			{				
				b2PolygonShape hrec,vrec;
				hrec.SetAsBox(0.2f, 2.0f);
				vrec.SetAsBox(0.4f, 1.5f);
				b2BodyDef bd2;
				bd2.position.Set(neckref.x + -32.5f-0.9*i, neckref.y + 34.5f);
				bd2.type = b2_dynamicBody;
				bd2.angle=10*DEGTORAD;
				neck[i] = m_world->CreateBody(&bd2);
				b2FixtureDef* fd2 = new b2FixtureDef;
				fd2->density = 0.0001f;
				fd2->filter.groupIndex = 1;
				fd2->shape = new b2PolygonShape;
				fd2->shape = &hrec;
				neck[i]->CreateFixture(fd2);
				fd2->shape = &vrec;
				neck[i]->CreateFixture(fd2);
				if(i>0)
				{
					b2WeldJointDef jd1;
					anchor.Set(neckref.x + -32.0f-0.9*i, neckref.y + 34.5f);
					jd1.Initialize(neck[i-1], neck[i], anchor);
					m_world->CreateJoint(&jd1);
				}
			}
			
			b2WeldJointDef jd1;
			anchor.Set(neckref.x + -32.0f-0.9*3, neckref.y + 34.5f);
			jd1.Initialize(neck[2],head, anchor);
			m_world->CreateJoint(&jd1);
			
			anchor.Set(neckref.x + -32.0f-0.9*0, neckref.y + 34.5f);
			jd1.Initialize(neck[0],m_chassis, anchor);
			m_world->CreateJoint(&jd1);
		}	
		
	
	  
	//Hip
	b2Vec2 hipref(m_offset.x + 0.5f, m_offset.y  + -32.0f);
	  b2Body* hip;
	  {
		  b2PolygonShape poly;
		  b2Vec2 vertices[8];
		  vertices[0].Set(hipref.x + 0,hipref.y + 0);
		  vertices[1].Set(hipref.x + 10, hipref.y + 1);
		  vertices[2].Set(hipref.x + 13, hipref.y + -3);
		  vertices[3].Set(hipref.x + 11, hipref.y + -6);
		  vertices[4].Set(hipref.x + 4.4, hipref.y + -5);
		  vertices[5].Set(hipref.x + 3.6, hipref.y + -3.6);
		  vertices[6].Set(hipref.x + 1.4, hipref.y + -2.6);
		  vertices[7].Set(hipref.x + -1, hipref.y + -4);
		  poly.Set(vertices, 8);
		  b2FixtureDef hipfd;
		  hipfd.shape = &poly;
		  hipfd.density = 0.0f;
		  hipfd.friction = 1.0f;
		  hipfd.restitution = 0.8f;
		  hipfd.filter.groupIndex = -1;
		  
		  b2BodyDef hipbd;
		  hipbd.type = b2_dynamicBody;
		  hipbd.position.Set(hipref.x + 6.0f, hipref.y + 37.0f);
		  hip = m_world->CreateBody(&hipbd);
		  hip->CreateFixture(&hipfd);
			b2WeldJointDef jd1;
			
		  anchor.Set(hipref.x + 6.0f, hipref.y + 35.5f);
			jd1.Initialize(m_chassis, hip, anchor);
			m_world->CreateJoint(&jd1);
	  
	  } 
	  
	  
	b2Vec2 ref(m_offset.x + 3.0f, m_offset.y  + -33.0f);
	float32 tail_density = 0.0000001f;
	anchor.Set(ref.x + 6.0f, ref.y + 35.5f);
		 //TAIL
	{
		//Tail object1
		b2Body* tail1;
		b2PolygonShape hrec,vrec;
		hrec.SetAsBox(1.0f, 2.0f);
		vrec.SetAsBox(2.0f, 1.0f);

		b2BodyDef bd2;
		bd2.angle=10*DEGTORAD;
		bd2.position.Set(ref.x + 19.0f, ref.y + 35.5f);
		bd2.type = b2_dynamicBody;

		tail1 = m_world->CreateBody(&bd2);
		b2FixtureDef* fd2 = new b2FixtureDef;
		fd2->density = tail_density;
		fd2->shape = new b2PolygonShape;
		fd2->shape = &hrec;
		fd2->filter.groupIndex = -2;
		tail1->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail1->CreateFixture(fd2);

		jd.enableLimit = true;
		jd.lowerAngle = -0.1f * b2_pi;
		jd.upperAngle = 0.2f * b2_pi; 
		anchor.Set(ref.x + 18.0f, ref.y + 35.0f);
		jd.Initialize(tail1, m_chassis, anchor);
		m_world->CreateJoint(&jd);


		//Tail object2
		b2Body* tail2;
		tail2 = m_world->CreateBody(&bd2);
		bd2.angle=-35*DEGTORAD;
		bd2.position.Set(ref.x + 22.7f, ref.y + 34.5f);
		tail2 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.9f, 1.9f);
		vrec.SetAsBox(1.9f, 0.9f);
		fd2->shape = &hrec;
		tail2->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail2->CreateFixture(fd2);

		anchor.Set(ref.x + 21.0f, ref.y + 35.0f);
		jd.Initialize(tail1,tail2, anchor);
		m_world->CreateJoint(&jd);

		// making a distance joint
		b2DistanceJointDef joint4;
		const b2Vec2 pt1(ref.x + 19.0f, ref.y + 37.6f);
		const b2Vec2 pt2(ref.x + 23.2f, ref.y + 36.5f);
		joint4.Initialize(tail1, tail2, pt1, pt2);
		joint4.collideConnected = true;
		joint4.frequencyHz = 1.0f;
		joint4.dampingRatio =0.8f;
		m_world->CreateJoint(&joint4);

		//Tailobject3
		b2Body* tail3;
		tail3 = m_world->CreateBody(&bd2);
		bd2.angle=-60*DEGTORAD;
		bd2.position.Set(ref.x + 25.0f, ref.y + 32.0f);
		tail3 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.85f, 1.8f);
		vrec.SetAsBox(1.8f, 0.85f);
		fd2->shape = &hrec;
		tail3->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail3->CreateFixture(fd2);

		anchor.Set(ref.x + 23.1f, ref.y + 33.0f);
		jd.Initialize(tail2,tail3, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject4
		b2Body* tail4;
		tail4 = m_world->CreateBody(&bd2);
		bd2.angle=-80*DEGTORAD;
		bd2.position.Set(ref.x + 26.0f, ref.y + 28.3f);
		tail4 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.80f, 1.7f);
		vrec.SetAsBox(1.7f, 0.80f);
		fd2->shape = &hrec;
		tail4->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail4->CreateFixture(fd2);

		anchor.Set(ref.x + 25.5f, ref.y + 30.0f);
		jd.Initialize(tail3,tail4, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject5
		b2Body* tail5;
		tail5 = m_world->CreateBody(&bd2);
		bd2.angle=-90*DEGTORAD;
		bd2.position.Set(ref.x + 26.0f, ref.y + 25.2f);
		tail5 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.80f, 1.6f);
		vrec.SetAsBox(1.6f, 0.70f);
		fd2->shape = &hrec;
		tail5->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail5->CreateFixture(fd2);

		anchor.Set(ref.x + 25.5f, ref.y + 27.0f);
		jd.Initialize(tail4,tail5, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject6
		b2Body* tail6;
		tail6 = m_world->CreateBody(&bd2);
		bd2.angle=-90*DEGTORAD;
		bd2.position.Set(ref.x + 26.0f, ref.y + 22.2f);
		tail6 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.70f, 1.4f);
		vrec.SetAsBox(1.3f, 0.50f);
		fd2->shape = &hrec;
		tail6->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail6->CreateFixture(fd2);

		anchor.Set(ref.x  + 25.5f, ref.y + 24.5f);
		jd.Initialize(tail5,tail6, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject7
		b2Body* tail7;
		tail7 = m_world->CreateBody(&bd2);
		bd2.angle=-80*DEGTORAD;
		bd2.position.Set(ref.x + 26.0f, ref.y + 19.2f);
		tail7 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.60f, 1.3f);
		vrec.SetAsBox(1.2f, 0.50f);
		fd2->shape = &hrec;
		tail7->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail7->CreateFixture(fd2);

		anchor.Set(ref.x + 25.5f, ref.y + 20.5f);
		jd.Initialize(tail6,tail7, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject8
		b2Body* tail8;
		tail8 = m_world->CreateBody(&bd2);
		bd2.angle=-55*DEGTORAD;
		bd2.position.Set(ref.x + 27.0f, ref.y + 17.2f);
		tail8 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.50f, 1.2f);
		vrec.SetAsBox(1.1f, 0.44f);
		fd2->shape = &hrec;
		tail8->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail8->CreateFixture(fd2);

		anchor.Set(ref.x + 26.3f, ref.y + 19.0f);
		jd.Initialize(tail7,tail8, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject9
		b2Body* tail9;
		tail9 = m_world->CreateBody(&bd2);
		bd2.angle=-25*DEGTORAD;
		bd2.position.Set(ref.x + 28.5f, ref.y + 16.2f);
		tail9 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.50f, 0.9f);
		vrec.SetAsBox(1.6f, 0.30f);
		fd2->shape = &hrec;
		tail9->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail9->CreateFixture(fd2);

		anchor.Set(ref.x + 27.5f, ref.y + 17.0f);
		jd.Initialize(tail8,tail9, anchor);
		m_world->CreateJoint(&jd);

		//Tailobject10
		b2Body* tail10;
		tail10 = m_world->CreateBody(&bd2);
		bd2.angle=15*DEGTORAD;
		bd2.position.Set(ref.x + 31.0f, ref.y + 16.1f);
		tail10 = m_world->CreateBody(&bd2);
		hrec.SetAsBox(0.80f, 0.3f);
		vrec.SetAsBox(1.3f, 0.20f);
		fd2->shape = &hrec;
		tail10->CreateFixture(fd2);
		fd2->shape = &vrec;
		tail10->CreateFixture(fd2);

		anchor.Set(ref.x + 29.5f, ref.y + 16.0f);
		jd.Initialize(tail9,tail10, anchor);
		m_world->CreateJoint(&jd);
	  }
		
		
  }

  sim_t *sim = new sim_t("Dominos", dominos_t::create);
}
